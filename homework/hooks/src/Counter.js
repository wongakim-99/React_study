/**Hook이란?
 * 훅이라는 용어는 함수형 컴포넌트 안에서 리액트의 생명주기 기능을 '갈고리'처럼 사용할 수 있도록 해준다는
 * 의미를 가진다. --> 함수형 컴포넌트가 클래스형 컴포넌트와 비슷한 기능을 수행 할 수 있도록 만들어줌
 *
 * 예를들어, useState 훅을 사용하면 상태를 선언하고 관리할 수 있음. 이때 훅은 함수형 컴포넌트의 '갈고리'
 * 역할을 하여 컴포넌트의 상태를 '갈고리'에 걸어서 가져다 쓸 수 있다.
 *
 * 훅(Hook)이란 함수형 컴포넌트에서 상태(state)와 다른 리액트 기능을 사용할 수 있도록 하는 기능이다.
 * 훅은 함수 컴포넌트 내에서 호출되어야 하며, 클래스 컴포넌트에서는 사용할 수 없다.
 * 리액트 훅은 함수형 컴포넌트를 더 간단하고 가독성이 높고 유연하게 만들어준다.
 */

//useState는 가장 기본적인 Hook이며, 함수 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해 준다.
//만약 함수 컴포넌트에서 상태를 관리해야 한다면 이 Hook을 사용하면 된다.

import React, { useState } from "react";

const Counter = () => {
  const [value, setValue] = useState(0); //useState훅을 사용하여 상태값인 value와
  //해당 값을 변경하는 setValue 함수를 선언함. useState(0) 은 초기값을 0으로 설정함
  /**!비구조화 할당 문법!
   * 배열의 첫 번째 요소는 value, 두 번째 요소는 해당 상태값을 업데이트 하는 setValue 라는 이름의 변수에
   * 할당하고 있음
   *
   * 비구조화 할당 문법을 사용하여 이 배열의 각 요소를 각각 value와 setValue라는 이름의 변수에 할당하고 있음
   *
   * 따라서 위의 구문은 배열의 첫 번째 요소를 value라는 이름의 변수에 할당하고, 두 번째 요소를 setValue라는
   * 이름의 변수에 할당한다는 의미를 가짐
   */

  return (
    <div>
      <p>
        현재 카운트 값은 <b>{value}</b>입니다.
      </p>
      {/**이벤트 핸들러에서 setValue를 호출하여 상태를 업데이트 한다. React는 상태가 변경되면
       * 해당 컴포넌트를 리렌더링한다.
       */}
      <button onClick={() => setValue(value + 1)}>+1</button>
      <button onClick={() => setValue(value - 1)}>-1</button>
    </div>
  );
};

export default Counter;

/**useState함수의 파라미터에는 상태의 기본값을 넣어 준다.
 * 현재 0을 넣었는데 이 의미는 Counter의 기본값 -> 0 으로 설정
 * 그 배열의 첫 번째 원소는 상태 값, 두 번째 원소는 상태를 설정하는 함수
 */
