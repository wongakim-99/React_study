[useReducer]
React 공식 문서에 따르면 useReducer는 useState의 대체 함수라고 한다.

useReducer는 state(상태)를 관리하고 업데이트하는 Hook에만 useState를 대체할 수 있는 Hook이다.
다시 말해, useReducer는 useState처럼 State를 관리하고 업데이트할 수 있는 Hook이다.

useReducer의 묘미는, 한 컴포넌트 내에서 State를 업데이트하는 로직 부분을 그 컴포넌트로부터 분리시키는 것을 가능하게 해 준다는 것이다.
그렇게 useReducer는 State업데이트 로직을 분리하여 컴포넌트의 외부에 작성하는 것을 가능하게 함으로써, 코드의 최적화를 이루게 해준다.





💡 useState : 
useState는 React 컴포넌트에서 상태(state)를 다루는 Hook이다. 
컴포넌트에서 상태를 변경하면, 해당 컴포넌트가 다시 렌더링 된다.
상태가 변경되면, 컴포넌트가 화면에 다시 그려져서 새로운 상태가 반영됩니다.

useState는 다음과 같은 상황에서 사용합니다.

- 컴포넌트 내부에서 변경 가능한 상태를 다룰 때
- 사용자의 입력에 따라 컴포넌트가 동적으로 변경되어야 할 때
- 상태를 초기화하거나 업데이트할 때





💡 useReducer : 
useReducer는 React 컴포넌트에서 상태(state)를 다루는 또 다른 Hook이다.
useReducer는 useState와 비슷하게 상태를 변경할 수 있지만, 좀 더 복잡한 로직을 다룰 수 있다.
useReducer는 상태와 액션(action)을 받아서, 새로운 상태를 반환하는 리듀서 함수를 이용한다.

useReducer는 아래와 같은 상황에서 주로 사용한다.
- 복잡한 상태 로직을 다룰 때
- 여러 개의 연관된 상태를 함께 다룰 때
- 컴포넌트의 상태 업데이트 로직을 다른 파일로 분리하고 싶을 때





useState vs useReducer
- useState는 간단한 상태 로직을 다루기에 적합하다.
- useReducer는 좀 더 복잡한 상태 로직을 다룰 수 있다.
- useState는 상태를 업데이트할 때 이전 상태를 덮어쓰는 반면, useReducer는 이전 상태를 변경하지 않고, 새로운 상태를 생성
- useState는 한 개의 상태만 다룰 수 있지만, useReducer는 여러 개의 연관된 상태를 함께 다룰 수 있다.
- useState는 컴포넌트 내부에서 상태를 다루지만, useReducer는 다른 파일에서 리듀서 함수를 정의하여 상태를 다룰 수 있다.


요약(summary)
📌  useState 
- 관리해야 할 State가 1개일 경우
- 그  State가 단순한 숫자, 문자열 또는 Boolean 값일 경우 

 

 

📌  useReducer
 - 관리해야 할 State가 1개 이상, 복수일 경우
 - 혹은 현재는 단일 State 값만 관리하지만, 추후 유동적인 가능성이 있는 경우
 - 스케일이 큰 프로젝트의 경우
 - State의 구조가 복잡해질 것으로 보이는 경우 