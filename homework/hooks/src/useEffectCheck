useEffect의 의존성 배열

- useEffect에서 의존성 배열을 다루는 것은 굉장히 중요함
- 의존성 배열을 제대로 다루지 못한다면 useEffect를 사용하면서 버그가 발생할 확률 큼

1. 의존성 배열이란?

- useEffect에 두 번째 인자로 넘기는 배열
- 그리고 두 번째 인자를 넘기지 않으면 Effect는 매번 실행
- 빈 배열을 넘긴다면 컴포넌트의 첫번째 렌더링 이후에만 실행

useEffect의 시그니쳐

useEffect(effect, 의존성)

여기서 effect는 함수의 형태로 표현되고, 의존성은 여러 의존성들을 한번에 전달하기 위해서
배열의 형태로 표현

useEffect에서 의존성 배열이란 "무언가가 의존하고 있는 요소들의 모음" 이라고 할 수 있다.
그리고 여기서 말하는 무언가는 바로 effect 함수다. 즉 useEffect의 의존성 배열은 "effect 함수가 의존하고 있는
요소들의 모음" 이라고 할 수 있다.

요약

1. useEffect(() => {}) -> 컴포넌트가 렌더링 될 때마다 호출된다. 매우 비효율적

2. useEffect(() => {}, []) -> 첫 번째 렌더링 후에만 호출된다.
   사용예시
   API호출을 첫 번째 렌더링 후에만 호출할 경우
   ex)
   useEffect (() => {
   fetch(movies)
   .then((res) => res.json())
   .then((data) => setMovies(data.List));
   }, [])

3. useEffect(() => {}, [value]) -> 첫 번째 렌더링 후에 호출됨. value는 렌더링과 관련된 값.
   값이 변해도 렌더링 되지 않는 값이라면 의존성 배열애 있어도 함수가 다시 호출되지 않는다.
